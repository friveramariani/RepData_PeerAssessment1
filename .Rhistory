str (pretest1005)
hist(as.numeric(pretest1005$X9))
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot (x, y, lwd = 3, frame = FALSE = type = "1")
plot (x, y, lwd = 3, frame = FALSE,= type = "1")
plot (x, y, lwd = 3, frame = FALSE, type = "1")
plot (x, y, lwd = 3, frame = FALSE)
plot (x, y, lwd = 3, frame = FALSE, type = "1")
plot (x, y, lwd = 3, frame = FALSE, type = "l")
1/5 * 0.75/2
1.5 * 0.75/2
pbeta (0.75, 2, 1)
pbeta (c(0.4, 0.5, 0.6) 2, 1)
pbeta (c(0.4, 0.5, 0.6), 2, 1)
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(ggplot2)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
activity <- read.csv (file="C:/Users/Felix/Dropbox/Coursera/ata Science Specialization/activity.csv")
activity <- read.csv("C:/Users/Felix/Dropbox/Coursera/Data Science Specialization/activity.csv")
View(activity)
actiity$date <-as.Date (activity$date)
activity$date <-as.Date (activity$date)
head (activity)
library (reshape2   )
actbyDay <- aggregate (activity$steps, by=list(date=activity$date), sum)
head (actbyDay)
meanActByDay <- mean(actbyDay$x na.rm = TRUE)
meanActByDay <- mean(actbyDay$x, na.rm = TRUE)
medianActByDay <- median(actbyDay$x, na.rm = TRUE)
meanActByDay
medianActByDay
with(actbyDay,{
barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", main="Histogram of Number of Steps per Day")
})
barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 2400000), main="Histogram of Number of Steps per Day")
barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 2400000), main="Histogram of Number of Steps per Day")
witht(actbyDay, {barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 2400000), main="Histogram of Number of Steps per Day")
})
with(actbyDay, {barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 2400000), main="Histogram of Number of Steps per Day")
})
with(actbyDay, {barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 2400000), main="Histogram of Number of Steps per Day")
})
with(actbyDay, {barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 2400000), main="Histogram of Number of Steps per Day")
with(actbyDay, {barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 2400000), main="Histogram of Number of Steps per Day")
})
with(actbyDay, {barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 240000), main="Histogram of Number of Steps per Day")})
with(actbyDay, {barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 24000), main="Histogram of Number of Steps per Day")})
with(actbyDay, {barplot(height=x, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 25000), main="Histogram of Number of Steps per Day")})
stepsPerInterval <- aggregate (steps ~ interval, data = activity, FUN = mean)
head (stepsPerInterval)
library (Rcmdr)
with (stepsPerInterval, {)
with (stepsPerInterval, {
max(actbyDay$x)
max(stepsPerInterval$steps
)
stepsPerInterval$interval[which.max(stepsPerInterval$steps)]
sum(is.na(activity)
)
sum(is.na(activity))
sum(is.na(activity$steps))
actWoNa <- is.na(activity$steps)
actWoNa <- activity
noNa <- is.na(actWoNa$steps)
actAvg <-tapply(df_ign$steps, df_ing$interval, mean, na.rm = TRUE, simplify = T)
actWoNa<-tapply(actWoNa$steps, actWoNa$interval, mean, na.rm = TRUE, simplify = T)
head (actWoNa)
hist (actWoNa)
activity$steps_2 <-activity$steps
actObs <-nrow (activity)
Row <- 1
while (Row <= actObs){
if (is.na(activity$steps[Row])){
intervalRow <-activity$interval[Row]
actWoNa <-activity
library (reshape2)
actBin <-merge (actWoNa, stepsPerInterval, by ="interval", suffixes = c(".act", ".spi"))
actNaIndex = which(is.na(actWoNa$steps))
actWoNa[actNaIndex, "steps"] = actBin [actNaIndex, "steps.spi"]
MeltactWoNa <- melt (actWoNa, id.vars = "date", measure.vars = "steps", na.rm=TRUE)
CastactWoNa <= dcast (MeltactWoNa, date ~ variable, sum)
CastactWoNa <- dcast (MeltactWoNa, date ~ variable, sum)
head (CastactWoNa)
with(CastactWoNa, {barplot(height=steps, names.arg = date, xlab="Date", ylab="Number of Steps", ylim=c(0, 25000), main="Histogram of Number of Steps per Day")})
mean(CastactWoNa$steps)
median(CastactWoNa$steps)
head (CastactWoNa)
sum (is.na(CastactWoNa))
nrows(CastactWoNa)
nrow (CastactWoNa)
sum (is.na(actWoNa))
sum (is.na(MeltactWoNa))
for (i in 1:nrow(MeltactWoNa)){
if(weekdays(MeltactWoNa[i]) == "Saturday" | weekdays((MeltactWoNa) == "Sunday"){)
if(weekdays(MeltactWoNa[i]) == "Saturday" | weekdays((MeltactWoNa) == "Sunday"){
for (i in 1:nrow(MeltactWoNa)){
if (weekdays(MeltactWoNa$date)[i]) == "Saturday" | (weekdays(MeltactWoNa$date)[i]) == "Sunday") {
for (i in 1:nrow(MeltactWoNa)) {
if (weekdays(MeltactWoNa$date[i]) == "Saturday" | weekdays(MeltactWoNa$date[i]) == "Sunday") {
MeltactWoNa$dayOfWeek[i] = "weekend"
} else {
MeltactWoNa$dayOfWeek[i] = "weekday"
}
}
head (MeltactWoNa)
tail (MeltactWoNa)
summary(MeltactWoNa$dayOfWeek)
library (plyr)
rename(MeltactWoNa, = c("dayOfWeek" = "Day"))
rename(MeltactWoNa, c("dayOfWeek" = "Day"))
head (MeltactWoNa)
rename(MeltactWoNa, c("dayOfWeek" = "Day"))
View(MeltactWoNa)
View(MeltactWoNa)
str(MeltactWoNa)
library (ggplot2)
actWkday <- subset (MeltactWoNa, dayOfWeek=="weekday")
actWkend <- subset (MeltactWoNa, dayOfWeek=="weekend")
actMltWkday <- melt (actWkday, id.vars = "interval", measure.vars = "steps")
head (MeltactWoNa)
head(MeltactWoNa)
str(MeltactWoNa)
tail(MeltactWoNa)
actWoNa <-activity
actBin <-merge (actWoNa, stepsPerInterval, by ="interval", suffixes = c(".act", ".spi"))
actNaIndex = which(is.na(actWoNa$steps))
actWoNa[actNaIndex, "steps"] = actBin [actNaIndex, "steps.spi"]
MeltactWoNa <- melt (actWoNa, id.vars = "date", measure.vars = "steps", na.rm=TRUE)
CastactWoNa <- dcast (MeltactWoNa, date ~ variable, sum)
head (CastactWoNa)
sum (is.na(MeltactWoNa))
head (MeltactWoNa)
tail(MeltactWoNa)
for (i in 1:nrow(MeltactWoNa)) {
if (weekdays(MeltactWoNa$date[i]) == "Saturday" | weekdays(MeltactWoNa$date[i]) == "Sunday") {
MeltactWoNa$dayOfWeek[i] = "weekend"
} else {
MeltactWoNa$dayOfWeek[i] = "weekday"
}
}
head (MeltactWoNa)
str (MeltactWoNa)
View(activity)
View(activity)
library (lattice)
xyplot(variable ~ value| factor(dayOfWeek),
layout = c(1, 2),
xlab="Interval",
ylab="Number of steps",
type="l",
lty=1,
data=MeltactWoNa)
actWoNa <- activity
ndx <-is.na(actWoNa$steps)
int_avg <- tapply (actWoNa$steps, actWoNa$interval, mean, na.rm = TRUE, simplify = T)
actWoNa$steps[ndx] <- int_avg[as.character(actWoNa$interval[ndx])]
actWoNa <- activity
ndx <-is.na(actWoNa$steps)
int_avg <- tapply (actWoNa$steps, actWoNa$interval, mean, na.rm = TRUE, simplify = T)
actWoNa$steps[ndx] <- int_avg[as.character(actWoNa$interval[ndx])]
is_weekday <- function(d){
wd <-weekdays(d)
if else (wd == "Saturday" | wd == "Sunday", "weekend", "weekday")}
is_weekday <- function(d){
wd <- weekdays (d)
ifelse (wd == "Saturday" | wd == "Sunday", "weekend", "weekday")}
wx <- sapply (actWoNa$date, is_weekday)
actWoNa$wk <- as.factor(wx)
head (actWoNa)
library (lattice)
xyplot(steps ~ interval | factor (wk),
layout = c(1, 2)
xlab="Interval"
xyplot(steps ~ interval | factor (wk),
layour = c(1, 2)
xlab = "Interval",
xyplot(steps ~ interval | factor (wk),
layout = c(1, 2),
xlab = "Interval"
ylab = "Number of Steps",
xyplot(steps ~ interval | factor (wk),
layour = c(1,2),
xlab = "Interval",
ylab = "Number of Steps",
type = "l"
lty=1,
xyplot(steps ~ interval | factor (wk),layour = c(1,2),
+ xlab = "Interval",
+ ylab = "Number of Steps",
xyplot(steps ~ interval | factor (wk),
layout=c(1,2)
xlab="Interval"
xyplot(steps ~ interval | factor (wk),
layout = c(1,2)
xlab = "Interval",
xyplot(steps ~ interval | factor (wk),
layout = c(1,2),
xlab="Interval",
ylab="Number of Steps",
type="l",
lty=1,
data=actWoNa)
library (Rcmdr)
sum(is.na(actWoNa))
activity <- read.csv(file="C:/Users/Felix/Dropbox/Coursera/Data Science Specialization/activity.csv")
activity$date <-as.Date (activity$date)
actbyDay <- aggregate (activity$steps, by=list(date=activity$date), sum)
meanActByDay <- mean(actbyDay$x, na.rm = TRUE)
medianActByDay <- median(actbyDay$x, na.rm = TRUE)
medianActByDay <- median(actbyDay$x, na.rm = TRUE)
library (reshape2)
actMeltDate <- melt(activity, id.vars="date", measure.vars="steps", na.rm=FALSE)
activity <- read.csv(file="C:/Users/Felix/Dropbox/Coursera/Data Science Specialization/activity.csv")
activity$date <-as.Date (activity$date)
actMeltDate <- melt(activity, id.vars="date", measure.vars="steps", na.rm=FALSE)
actCastDate <- dcast(actMeltDate, date ~ variable, sum)
plot(actCastDate$date, actCastDate$steps, type="h", main="Histogram of Daily Steps", xlab="Date", ylab="Steps per Day", col="gray", lwd=7)
plot(actCastDate$date, actCastDate$steps, type="h", main="Histogram of Daily Steps", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
mean(actvCastDate$steps, na.rm = TRUE)
activity <- read.csv(file="C:/Users/Felix/Dropbox/Coursera/Data Science Specialization/activity.csv")
activity$date <-as.Date (activity$date)
library(reshape2)
actvMeltDate <- melt(activity, id.vars="date", measure.vars="steps", na.rm=FALSE)
actvCastDate <- dcast(actvMeltDate, date ~ variable, sum)
plot(actvCastDate$date, actvCastDate$steps, type="h", main="Histogram of Steps Per Day", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
mean(actvCastDate$steps, na.rm = TRUE)
mean(actvCastDate$steps, na.rm = TRUE)
median(actvCastDate$steps, na.rm = TRUE)
actvMeltInt <-melt(activity, id.vars="interval", measure.vars="steps", na.rm=TRUE)
actvCastInt <- dcast(actvMeltInt, interval ~ variable, mean)
plot(actvCastInt$interval, actvCastInt$steps, type="l", main="Steps Frequencies per Interval", xlab="Interval (hours)", ylab="Number of Steps", col="brown", lwd=2)
actvCastInt$interval[which(actvCastInt$steps == max(actvCastInt$steps))]
max(actvCastInt$steps)
sum(is.na(activity$steps))
activityInt <-actvCastInt
activityWoNa <- activity
activityMerged = merge(activityWoNa, activityInt, by="interval", suffixes=c(".act", ".spi"))
indexNA = which(is.na(activityWoNa$steps))
activityWoNa[indexNA, "steps"] = activityMerged [indexNA, "steps.spi"]
sum(is.na(actvCastInt))
dim(actvCastInt)
sum(is.na(activityWoNa))
activityMeltWoNA <- melt(activityWoNa, id.vars="date", measure.vars="steps", na.rm=FALSE)
sum(is.na(activityMeltWoNa))
sum(is.na(activityMeltWoNA))
activityCastWoNa <- dcast(activityMeltWoNA, date ~ variable, sum)
sum(is.na(activityCastWoNa))
plot(activityCastWoNa$date, activityCastWoNa$steps, type="h", main="Histogram of Steps Per Day", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
mean(activityCastWoNa$steps, na.rm=TRUE)
median(activityCastWoNa$steps, na.rm=TRUE)
is_weekday <- function(d) {
wkd <- weekdays(d)
ifelse (wkd == "Saturday" | wkd == "Sunday",
"weekend", "weekday")
}
wkd
is_weekday()
is_weekday
wkday <-sapply (activityWoNa$date, is_weekday)
activityWoNa$wkd <- as.factor (wkday)
head (activityWoNa)
sum(is.na(activityWoNa))
library (lattice)
xyplot (steps ~ interval | factor(wkd),
layout=c(1,2),
xlab="Interval (hours)",
ylab="Number of Steps",
type="l",
lty=1,
data=activityWoNa)
str (activityWoNa)
wkday <-sapply (activityCastWoNa$date, is_weekday)
activityCastWoNa$wkd <- as.factor (wkday)
xyplot (steps ~ interval | factor(wkd),
layout=c(1,2),
xlab="Interval (hours)",
ylab="Number of Steps",
type="l",
lty=1,
data=activityCastWoNa)
str(activityCastWoNa)
activityMeltWoNA
ssum(is.na(activityMeltWoNA)))
ssum(is.na(activityMeltWoNA))
sum(is.na(activityMeltWoNA))
str(activityMeltWoNA)
names(activityMeltWoNA)
names(activityWoNa)
summary(activityWoNa)
activity <- read.csv(file="C:/Users/Felix/Dropbox/Coursera/Data Science Specialization/activity.csv")
activity$date <-as.Date (activity$date)
str(activity)
library(reshape2)
actvMeltDate <- melt(activity, id.vars="date", measure.vars="steps", na.rm=FALSE)
head(actvMeltDate)
actvCastDate <- dcast(actvMeltDate, date ~ variable, sum)
head (actvCastDate)
plot(actvCastDate$date, actvCastDate$steps, type="h", main="Histogram of Steps Per Day", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
actvMeltInt <-melt(activity, id.vars="interval", measure.vars="steps", na.rm=TRUE)
actvCastInt <- dcast(actvMeltInt, interval ~ variable, mean)
plot(actvCastInt$interval, actvCastInt$steps, type="l", main="Steps Frequencies per Interval", xlab="Interval (hours)", ylab="Number of Steps", col="brown", lwd=2)
activityInt <-actvCastInt
activityWoNa <- activity
activityMerged = merge(activityWoNa, activityInt, by="interval", suffixes=c(".act", ".spi"))
indexNA = which(is.na(activityWoNa$steps))
activityWoNa[indexNA, "steps"] = activityMerged [indexNA, "steps.spi"]
activityMeltWoNA <- melt(activityWoNa, id.vars="date", measure.vars="steps", na.rm=FALSE)
activityCastWoNa <- dcast(activityMeltWoNA, date ~ variable, sum)
plot(activityCastWoNa$date, activityCastWoNa$steps, type="h", main="Histogram of Steps Per Day", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
is_weekday <- function(d) {
wkd <- weekdays(d)
ifelse (wkd == "Saturday" | wkd == "Sunday",
"weekend", "weekday")
}
wkday <-sapply (activityWoNa$date, is_weekday)
activityWoNa$wkd <- as.factor (wkday)
activityMeltWoNA2 <- activityWoNa, id.vars="interval", measure.vars="steps", na.rm=TRUE)
activityMeltWoNA2 <- melt (activityWoNa, id.vars="interval", measure.vars="steps", na.rm=TRUE)
activityCastWoNa2 <- dcast (activityMeltWoNA2, interval ~ variable)
activityCastWoNa2 <- dcast (activityMeltWoNA2, interval ~ variable, mean)
head (activityCastWoNa2)
activity <- read.csv(file="C:/Users/Felix/Dropbox/Coursera/Data Science Specialization/activity.csv")
activity$date <-as.Date (activity$date)
library(reshape2)
actvMeltDate <- melt(activity, id.vars="date", measure.vars="steps", na.rm=FALSE)
actvCastDate <- dcast(actvMeltDate, date ~ variable, sum)
plot(actvCastDate$date, actvCastDate$steps, type="h", main="Histogram of Steps Per Day", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
mean(actvCastDate$steps, na.rm = TRUE)
actvMeltInt <-melt(activity, id.vars="interval", measure.vars="steps", na.rm=TRUE)
actvCastInt <- dcast(actvMeltInt, interval ~ variable, mean)
plot(actvCastInt$interval, actvCastInt$steps, type="l", main="Steps Frequencies per Interval", xlab="Interval (hours)", ylab="Number of Steps", col="brown", lwd=2)
activityInt <-actvCastInt
activityWoNa <- activity
activityMerged = merge(activityWoNa, activityInt, by="interval", suffixes=c(".act", ".spi"))
indexNA = which(is.na(activityWoNa$steps))
activityWoNa[indexNA, "steps"] = activityMerged [indexNA, "steps.spi"]
is_weekday <- function(d) {wkd <- weekdays(d)
ifelse (wkd == "Saturday" | wkd == "Sunday", "weekend", "weekday")
}
wkday <-sapply (activityWoNa$date, is_weekday)
activityWoNa$wkd <- as.factor (wkday)
str(activityWoNa)
actWkday <- subset(activityWoNa, wkd=="weekday")
actWkend <- subset (activityWoNa, wkd=="weekend")
actWkdayelt <- melt (actWkday, id.vars = "interval", measure.vars = "steps")
actWkdayMelt <- melt (actWkday, id.vars = "interval", measure.vars = "steps")
actWkendMelt <- melt (actWkend, id.vars = "interval", measure.vars = "steps")
actWkdayCast <- dcast (actWkdayMelt, interval ~ variable, mean)
actWkendCast <- dcast (actWkdendMelt, interval ~ variable, mean)
actWkendCast <- dcast (actWkendMelt, interval ~ variable, mean)
library (ggplot2)
library(gridExtra)
1stplot<- qplot(actWkdayMelt$interval, actWkdayMelt$steps, geom="line", data=actWkdayMelt, type="bar", main="Steps by Interval (Weekday)", xlab="Interval", ylab="Number of Steps")
PlotOne <- qplot(actWkdayMelt$interval, actWkdayMelt$steps, geom="line", data=actWkdayMelt, type="bar", main="Steps by Interval (Weekday)", xlab="Interval", ylab="Number of Steps")
PlotOne <- qplot(actWkdayMelt$interval, actWkdayMelt$steps, geom="line", data=actWkdayMelt, main="Steps by Interval (Weekday)", xlab="Interval", ylab="Number of Steps")
PlotTwo <- qplot(actWkdayCast$interval, actWkdayCast$steps, geom="line", data=actWkdayCast, main="Steps by Interval (Weekday)", xlab="Interval", ylab="Number of Steps")
PlotTwo <- qplot(actWkendCast$interval, actWkendCast$steps, geom="line", data=actWkendCast, main="Steps by Interval (Weekday)", xlab="Interval", ylab="Number of Steps")
PlotOne <- qplot(actWkdayCast$interval, actWkdayCast$steps, geom="line", data=actWkdayCast, main="Steps by Interval (Weekday)", xlab="Interval", ylab="Number of Steps")
grid.arrange(PlotOne, PlotTwo, nrow=2)
plot(activityCastWoNa$date, activityCastWoNa$steps, type="h", main="Histogram of Steps Per Day", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
activity <- read.csv(file="C:/Users/Felix/Dropbox/Coursera/Data Science Specialization/activity.csv")
activity$date <-as.Date (activity$date)
library(reshape2)
actvMeltDate <- melt(activity, id.vars="date", measure.vars="steps", na.rm=FALSE)
actvCastDate <- dcast(actvMeltDate, date ~ variable, sum)
plot(actvCastDate$date, actvCastDate$steps, type="h", main="Histogram of Steps Per Day", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
actvMeltInt <-melt(activity, id.vars="interval", measure.vars="steps", na.rm=TRUE)
actvCastInt <- dcast(actvMeltInt, interval ~ variable, mean)
plot(actvCastInt$interval, actvCastInt$steps, type="l", main="Steps Frequencies per Interval", xlab="Interval (hours)", ylab="Number of Steps", col="brown", lwd=2)
activityInt <-actvCastInt
activityWoNa <- activity
activityMerged = merge(activityWoNa, activityInt, by="interval", suffixes=c(".act", ".spi"))
indexNA = which(is.na(activityWoNa$steps))
activityWoNa[indexNA, "steps"] = activityMerged [indexNA, "steps.spi"]
activityMeltWoNA <- melt(activityWoNa, id.vars="date", measure.vars="steps", na.rm=FALSE)
activityCastWoNa <- dcast(activityMeltWoNA, date ~ variable, sum)
plot(activityCastWoNa$date, activityCastWoNa$steps, type="h", main="Histogram of Steps Per Day", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
Frances_allergens_modified_11272015 <- read.csv("C:/Users/Felix/Dropbox/Scientific/Mentoring/Frances Vila/Frances_allergens_modified_11272015.xlsx", sep="")
View(Frances_allergens_modified_11272015)
Subset.of.Tabla.alergenos.por.paciente_WB <- read.csv("C:/Users/Felix/Dropbox/Scientific/Mentoring/Frances Vila/Subset of Tabla alergenos por paciente_WB.csv", header=FALSE)
View(Subset.of.Tabla.alergenos.por.paciente_WB)
summary(Subset.of.Tabla.alergenos.por.paciente_WB)
v3
ELISA_WB <- read.csv("C:/Users/Felix/Dropbox/Scientific/Mentoring/Frances Vila/Subset of Tabla alergenos por paciente_ELISA_WB.csv")
View(ELISA_WB)
head (ELISA_WB)
tail (ELISA_WB)
summary(ELISA_WB)
library (dplyr)
arrange (ELISA_WB, Sum.Reactives)
SumReactions0 <-select(ELISA_WB, Sum.Reactives == 0)
SumReactions0 <-select(ELISA_WB, Sum.Reactives = 0)
SumReactions0 <-select(ELISA_WB, Sum.Reactives < 1)
str(ELISA_WB)
plot(ELISA_WB$Sum.Reactives, ELISA_WB$ELISA.OD)
plot(ELISA_WB$Sum.Reactives, ELISA_WB$ELISA.OD, xlab = "Number of Reactive Western Blot Bands", ylab = "ELISA OD")
abline (h=0.5)
install.packages(c("BH", "BiasedUrn", "digest", "ggthemes", "htmltools", "knitr", "maps", "RcmdrPlugin.KMggplot2", "Rcpp", "rgl", "rmarkdown", "visNetwork"))
q()
Session.2...01.11.16_4 <- read.csv("C:/Users/Felix/Dropbox/Teaching/1_Miami-Dade College/7_1_Reef_Polling/BSC1005_882361/Session 2 - 01-11-16_4.csv", header=FALSE)
View(Session.2...01.11.16_4)
RP_0111 <- read.csv("C:/Users/Felix/Dropbox/Teaching/1_Miami-Dade College/7_1_Reef_Polling/BSC1005_882361/Session 2 - 01-11-16_4.csv", header=FALSE)
View(RP_0111)
library (dplyr)
RP_new <- select(nrow(8:42))
str(RP_0111)
names(RP_0111)
RP_new <- slice(9:39)
RP_new <- slice(RP_0111, 9:39)
View(RP_new)
RP_new <- select (RP_new, V5, V6, V7, V8, V9)
summary(RP_new)
mean(RP_new, V5:V9)
mean(RP_new, V5)
str(RP_new)
RP_new$V5 <- as.numeric(RP_new$V5
)
str(RP_new)
H20 <- read.table("C:\\Users\\Felix\\AppData\\Local\\Temp\\RtmpO4H7jf\\data18141b632929", quote="\"")
View(H20)
library  (Rcmdr)
library(RcmdrPlugin.KMggplot2)
plot (Threads$Student, Threads$IntDen)
plot (Threads$Student, Threads$IntDen, type = "l")
library (ggplot2)
ggplot(Threads, aes(x=Student, y=IntDen))+
ggplot(Threads, aes(x=Student, y=IntDen))
ggplot(Threads, aes(x=Student, y=IntDen)) +
geom_errorbar(aes(ymin=IntDen-ci, ymax=IntDent+ci), width=.1, position=pd)
ggplot(Threads, aes(x=Student, y=IntDen)) +
geom_errorbar(aes(ymin=IntDen-se, ymax=IntDen+se), width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd)
> ggplot(Threads, aes(x=Student, y=IntDen)) +
+     geom_errorbar(aes(ymin=IntDen-se, ymax=IntDen+se), width=.1)
ggplot(Threads, aes(x=Student, y=IntDen)) +
+     geom_errorbar(aes(ymin=IntDen-se, ymax=IntDen+se), width=.1)
activity <- read.csv("C:/Users/Felix/Dropbox/Coursera/Data_Science_Specialization/activity.csv")
View(activity)
names (activity)
steps_per_day <- aggregate (steps ~ date, activity, sum)
head (steps_per_day)
dim (steps_per_day)
view (steps_per_day)
View (steps_per_day)
hist (steps_per_day$steps, main = "Total Number of Steps per Day", col="blue", xlab = "Number of Steps")
steps_per_interval <- aggregate (steps ~ interval, activity, mean)
head (steps_per_interval)
plot(steps_per_interval$interval, steps_per_interval$steps, type = "l")
plot(steps_per_interval$interval, steps_per_interval$steps, type = "l", xlab = "Interval", ylab = "Number of Steps")
steps_per_interval[which.max(steps_per_interval$steps),]
incomplete <- sum (!complete.cases(activity))
imputed_activty <- transform(activity, steps=ifelse(is.na(activity$steps), steps_per_interval$steps[match(activity$interval, steps_by_interval)], activity$steps))
imputed_activty <- transform(activity, steps=ifelse(is.na(activity$steps), steps_per_interval$steps[match(activity$interval, steps_per_interval)], activity$steps))
sum (is.na(imputed_activty))
imputed_activty[as.character(imputed_activty$date) == "2012-10-1", 1] <- 0
steps_per_day_imp <- aggregate(steps ~ date, imputed_activty, sum)
hist(steps_per_day_imp$steps, main = "Total Steps per Day", col="blue", xlab="Number of Steps")
hist(steps_per_day$steps, main = "Totap Steps per Day", col="red", xlab="Number of Steps", add=T)
legend ("toprigh", c("Impoted", "Non-Imputed"), col=c("blue", "red"), lwd=10)
library (plyr)
library (dplyr)
library (ggplot2)
library (lubridate)
activity <- read.csv("C:/Users/Felix/Dropbox/Coursera/Data_Science_Specialization/activity.csv")
View(activity)
interva_steps <- ddply (activity, .(interval), summarise, avg_interval_steps = mean (steps, na.rm = TRU/E))
interva_steps <- ddply (activity, .(interval), summarise, avg_interval_steps = mean (steps, na.rm = TRUE))
qplot (x=interval, x=avg_interval_steps, data = interval_steps, geom="line", main = "Average Daily Activity Patterns")
qplot (x=interval, x=avg_interval_steps, data = interval_steps, geom="line", main = "Average Daily Activity Patterns")
library (Rcmdr)
sessionInfo()
activity <- read.csv(file="C:/Users/Felix/Dropbox/Coursera/Data_Science_Specialization/activity.csv")
activity$date <-as.Date (activity$date)
library(reshape2)
actvMeltDate <- melt(activity, id.vars="date", measure.vars="steps", na.rm=FALSE)
actvCastDate <- dcast(actvMeltDate, date ~ variable, sum)
plot(actvCastDate$date, actvCastDate$steps, type="h", main="Histogram of Steps Per Day", xlab="Date", ylab="Steps per Day", col="brown", lwd=7)
mean(actvCastDate$steps, na.rm = TRUE)
setwd("C:/Users/Felix/Dropbox/Coursera/Data_Science_Specialization/GitHub/RepData_PeerAssessment1")
median(actvCastDate$steps, na.rm = TRUE)
paste("Mean Steps Per Day=", mean(actvCastDate$steps, na.rm = TRUE))
paste("Median of Steps Per Day=", median(actvCastDate$steps, na.rm = TRUE))
knit2html("PA1_template.Rmd")
library (knitr)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
rmarkdown::render("PA1_template.Rmd")
